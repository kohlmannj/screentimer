{"version":3,"sources":["../src/index.js"],"names":["isInViewport","defaults","callback","lookInterval","reportInterval","element","range","top","height","wH","window","innerHeight","bcr","getBoundingClientRect","pageYOffset","bottom","Screentimer","handlePageVisibilityChange","stopTimer","document","hidden","startTimer","look","onScreen","counter","report","count","seconds","looker","reporter","started","Error","addEventListener","inViewport","setInterval","clearInterval","removeEventListener"],"mappings":"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","file":"index.js","sourcesContent":["export const defaults = {\n  callback: () => {},\n  lookInterval: 1,\n  reportInterval: 10,\n};\n\nexport function isInViewport(element) {\n  if (!element) {\n    return false;\n  }\n\n  const range = { top: 0, height: 1 };\n  const wH = window.innerHeight;\n  const bcr = element.getBoundingClientRect();\n  const top = bcr.top + pageYOffset;\n  const height = bcr.height;\n  const bottom = top + height;\n\n  return (\n    pageYOffset + (wH * (range.top + range.height)) > top &&\n    pageYOffset + (wH * range.top) < bottom\n  );\n}\n\nexport default class Screentimer {\n  constructor(element, callback, { lookInterval, reportInterval } = {}) {\n    this.looker = null;\n    this.reporter = null;\n\n    this.counter = 0;\n    this.started = false;\n\n    this.element = element;\n\n    if (!this.element) {\n      throw new Error('Screentimer constructor: `element` argument is falsy');\n    }\n\n    this.callback = callback || defaults.callback;\n    this.lookInterval = lookInterval || defaults.lookInterval;\n    this.reportInterval = reportInterval || defaults.reportInterval;\n\n    this.startTimer();\n\n    // Attach window event listener to handle timer starts and stops based on page visibility\n    window.addEventListener('visibilitychange', this.handlePageVisibilityChange);\n  }\n\n  handlePageVisibilityChange = () => {\n    this.stopTimer();\n\n    if (!document.hidden) {\n      this.startTimer();\n    }\n  };\n\n  onScreen() {\n    const element = typeof this.element === 'function' ? this.element() : this.element;\n\n    if (!element) {\n      return false;\n    }\n    \n    const inViewport = isInViewport(element);\n\n    return isInViewport(element);\n  }\n\n  look = () => {\n    if (this.onScreen()) {\n      this.counter += 1;\n    }\n  };\n\n  report = () => {\n    if (this.counter > 0) {\n      const count = this.counter;\n      // Reset `this.counter` since we'll have reported the current number of intervals since the\n      // last call to report().\n      this.counter = 0;\n\n      if (typeof this.callback === 'function') {\n        this.callback({ count, seconds: count * this.lookInterval });\n      }\n    }\n  }\n\n  startTimer() {\n    if (!this.started) {\n      this.started = true;\n    }\n\n    this.looker = setInterval(this.look, this.lookInterval * 1000)\n    this.reporter = setInterval(this.report, this.reportInterval * 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.looker);\n    clearInterval(this.reporter);\n  }\n\n  reset() {\n    this.stopTimer();\n    this.counter = 0;\n    this.startTimer();\n  }\n\n  destroy() {\n    this.stopTimer();\n    window.removeEventListener('visibilitychange', this.handlePageVisibilityChange);\n  }\n}\n"]}