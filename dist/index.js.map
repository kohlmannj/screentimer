{"version":3,"sources":["../src/index.js"],"names":["getWindowScrollTop","getWindowBounds","defaults","callback","lookInterval","reportInterval","threshold","pageYOffset","B","document","body","D","documentElement","clientHeight","scrollTop","top","height","window","innerHeight","bottom","width","innerWidth","Screentimer","element","handlePageVisibilityChange","stopTimer","hidden","startTimer","look","onScreen","counter","report","count","seconds","looker","reporter","started","Error","addEventListener","field","getBoundingClientRect","viewport","cond","buffered","partialView","setInterval","clearInterval","removeEventListener"],"mappings":"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","file":"index.js","sourcesContent":["export const defaults = {\n  callback: () => {},\n  lookInterval: 1,\n  reportInterval: 10,\n  threshold: 0.5,\n};\n\nexport function getWindowScrollTop() {\n  if (typeof pageYOffset !== 'undefined') {\n      // Most browsers except IE before 9\n      return pageYOffset;\n  } else {\n    const B = document.body; // IE 'quirks'\n    let D = document.documentElement; // IE with doctype\n    D = (D.clientHeight) ? D : B;\n    return D.scrollTop;\n  }\n}\n\nexport function getWindowBounds() {\n  const top = getWindowScrollTop();\n  const height = window.innerHeight;\n\n  return {\n    bottom: top + height,\n    height,\n    top: getWindowScrollTop(),\n    width: window.innerWidth\n  }\n}\n\nexport default class Screentimer {\n  constructor(element, callback, { lookInterval, reportInterval, threshold } = {}) {\n    this.looker = null;\n    this.reporter = null;\n\n    this.counter = 0;\n    this.started = false;\n\n    this.element = element;\n\n    if (!this.element) {\n      throw new Error('Screentimer constructor: `element` argument is falsy');\n    }\n\n    this.callback = callback || defaults.callback;\n    this.lookInterval = lookInterval || defaults.lookInterval;\n    this.reportInterval = reportInterval || defaults.reportInterval;\n    this.threshold = threshold || defaults.threshold;\n\n    this.startTimer();\n\n    // Attach window event listener to handle timer starts and stops based on page visibility\n    window.addEventListener('visibilitychange', this.handlePageVisibilityChange);\n  }\n\n  handlePageVisibilityChange = () => {\n    this.stopTimer();\n\n    if (!document.hidden) {\n      this.startTimer();\n    }\n  };\n\n  onScreen() {\n    const field = this.element.getBoundingClientRect();\n    const viewport = getWindowBounds();\n\n    let cond;\n    let buffered;\n    let partialView;\n\n    // Field entirely within viewport\n    if ((field.bottom <= viewport.bottom) && (field.top >= 0)) {\n      return true;\n    }\n\n     // Field bigger than viewport\n    if (field.height > viewport.height) {\n\n      cond = (viewport.bottom - field.top) > (viewport.height / 2) && field.bottom > (viewport.height / 2);\n\n      if (cond) {\n        return true;\n      }\n\n    }\n\n    // Partially in view\n    buffered = field.height * this.threshold;\n    partialView = ((viewport.bottom - buffered) >= field.top && (field.bottom - buffered) > viewport.top);\n\n    return partialView;\n  }\n\n  look = () => {\n    if (this.onScreen()) {\n      this.counter += 1;\n    }\n  };\n\n  report = () => {\n    if (this.counter > 0) {\n      const count = this.counter;\n      // Reset `this.counter` since we'll have reported the current number of intervals since the\n      // last call to report().\n      this.counter = 0;\n\n      if (typeof this.callback === 'function') {\n        this.callback({ count, seconds: count * this.lookInterval });\n      }\n    }\n  }\n\n  startTimer() {\n    if (!this.started) {\n      this.started = true;\n    }\n\n    this.looker = setInterval(this.look, this.lookInterval * 1000)\n    this.reporter = setInterval(this.report, this.reportInterval * 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.looker);\n    clearInterval(this.reporter);\n  }\n\n  reset() {\n    this.stopTimer();\n    this.counter = 0;\n    this.startTimer();\n  }\n\n  destroy() {\n    this.stopTimer();\n    window.removeEventListener('visibilitychange', this.handlePageVisibilityChange);\n  }\n}\n"]}